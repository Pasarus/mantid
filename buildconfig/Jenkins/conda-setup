#!/bin/bash

# From https://stackoverflow.com/a/9107028 by https://stackoverflow.com/users/1184238/andrew-norrie
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

EXPECTED_MINICONDA_DIR_PATH=$HOME/miniconda3
EXPECTED_CONDA_PATH=$EXPECTED_MINICONDA_DIR_PATH/bin/conda

# Ensure conda is installed
if [[ ! -f $EXPECTED_CONDA_PATH ]]; then
    if [[ ! -f Miniconda3-latest-Linux-x86_64.sh ]]; then
        # Download miniconda
        curl -O https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
    fi
    sh Miniconda3-latest-Linux-x86_64.sh -b -p $EXPECTED_MINICONDA_DIR_PATH
    rm Miniconda3-latest-Linux-x86_64.sh
fi

# With miniconda we can grab the mantid environment if it doesn't already exist
ENVS=$($EXPECTED_CONDA_PATH env list)
if [[ ! $ENVS = *"$EXPECTED_MINICONDA_DIR_PATH/envs/mantid"* ]]; then
    # THIS IS JUST A TEST PATH:
    $EXPECTED_CONDA_PATH env create -f $SCRIPT_DIR/../../mantid-developer-linux.yml
else
    echo "Conda environment already setup."
fi

# There is a bug in Conda that causes issues with a none conda-init activation method this is a workaround
BUGGY_FILE=$EXPECTED_MINICONDA_DIR_PATH/envs/mantid/etc/conda/activate.d/activate-binutils_linux-64.sh
if [[ -f $BUGGY_FILE ]]; then
    BUGGY_FILE_TEXT="#!/bin/bash\n\n# This function takes no arguments\n# It tries to determine the name of this file in a programatic way.\n_get_sourced_filename() {\n    if [ -n \"\${BASH_SOURCE[0]}\" ]; then\n        basename \"\${BASH_SOURCE[0]}\"\n    elif [ -n \"\${(%):-%x}\" ]; then\n        # in zsh use prompt-style expansion to introspect the same information\n        # see http://stackoverflow.com/questions/9901210/bash-source0-equivalent-in-zsh\n        basename \"\${(%):-%x}\"\n    else\n        echo \"UNKNOWN FILE\"\n    fi\n}\n\n# The arguments to this are:\n# 1. activation nature {activate|deactivate}\n# 2. toolchain nature {build|host|ccc}\n# 3. machine (should match -dumpmachine)\n# 4. prefix (including any final -)\n# 5+ program (or environment var comma value)\n# The format for 5+ is name{,,value}. If value is specified\n#  then name taken to be an environment variable, otherwise\n#  it is taken to be a program. In this case, which is used\n#  to find the full filename during activation. The original\n#  value is stored in environment variable CONDA_BACKUP_NAME\n#  For deactivation, the distinction is irrelevant as in all\n#  cases NAME simply gets reset to CONDA_BACKUP_NAME.  It is\n#  a fatal error if a program is identified but not present.\n_tc_activation() {\n  local act_nature=\$1; shift\n  local tc_prefix=\$1; shift\n  local thing\n  local newval\n  local from\n  local to\n  local pass\n\n  if [ \"\${act_nature}\" = \"activate\" ]; then\n    from=\"\"\n    to=\"CONDA_BACKUP_\"\n  else\n    from=\"CONDA_BACKUP_\"\n    to=\"\"\n  fi\n\n  for pass in check apply; do\n    for thing in \"\$@\"; do\n      case \"\${thing}\" in\n        *,*)\n          newval=\$(echo \"\${thing}\" | sed \"s,^[^\\,]*\\,\\(.*\\),\\1,\")\n          thing=\$(echo \"\${thing}\" | sed \"s,^\\([^\\,]*\\)\\,.*,\\1,\")\n          ;;\n        *)\n          newval=\"\${CONDA_PREFIX}/bin/\${tc_prefix}\${thing}\"\n          if [ ! -x \"\${newval}\" -a \"\${pass}\" = \"check\" ]; then\n            echo \"ERROR: This cross-compiler package contains no program \${newval}\"\n            return 1\n          fi\n          ;;\n      esac\n      if [ \"\${pass}\" = \"apply\" ]; then\n        thing=\$(echo \${thing} | tr 'a-z+-.' 'A-ZX__')\n        eval oldval=\"\\\$\${from}\$thing\"\n        if [ -n \"\${oldval}\" ]; then\n          eval export \"\${to}'\${thing}'=\\\"\${oldval}\\\"\"\n        else\n          eval unset '\${to}\${thing}'\n        fi\n        if [ -n \"\${newval}\" ]; then\n          eval export \"'\${from}\${thing}=\${newval}'\"\n        else\n          eval unset '\${from}\${thing}'\n        fi\n      fi\n    done\n  done\n  return 0\n}\n\nif [ \"\${CONDA_BUILD:-0}\" = \"1\" ]; then\n  if [ -f /tmp/old-env-\$\$.txt ]; then\n    rm -f /tmp/old-env-\$\$.txt || true\n  fi\n  env > /tmp/old-env-\$\$.txt\nfi\n\n# gold has not been (cannot be?) built for powerpc\nif echo x86_64-conda-linux-gnu | grep powerpc > /dev/null; then\n  GOLD_USED=\nelse\n  GOLD_USED=ld.gold\nfi\n\n_tc_activation \\\n  activate x86_64-conda-linux-gnu- \\\n  addr2line ar as c++filt elfedit gprof ld \${GOLD_USED} nm objcopy objdump ranlib readelf size strings strip \\\n\nif [ \$? -ne 0 ]; then\n  echo \"ERROR: \$(_get_sourced_filename) failed, see above for details\"\n#exit 1\nelse\n  if [ \"\${CONDA_BUILD:-0}\" = \"1\" ]; then\n    if [ -f /tmp/new-env-\$\$.txt ]; then\n      rm -f /tmp/new-env-\$\$.txt || true\n    fi\n    env > /tmp/new-env-\$\$.txt\n\n    echo \"INFO: \$(_get_sourced_filename) made the following environmental changes:\"\n    diff -U 0 -rN /tmp/old-env-\$\$.txt /tmp/new-env-\$\$.txt | tail -n +4 | grep \"^-.*\\|^+.*\" | grep -v \"CONDA_BACKUP_\" | sort\n    rm -f /tmp/old-env-\$\$.txt /tmp/new-env-\$\$.txt || true\n  fi\nfi\n"
    $BUGGY_FILE_TEXT >> $BUGGY_FILE
fi

echo "Conda is now configured, and setup."
exit