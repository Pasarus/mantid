def git_clone(){
    git url: 'https://github.com/mantidproject/mantid.git',
        branch: 'main_pipeline_prototype'
}

def build_and_test_linux() {
    git_clone()
    sh "$WORKSPACE/buildconfig/Jenkins/Conda/conda-buildscript $WORKSPACE linux-ci --enable-systemtests --enable-docs --enable-doctests --enable-dev-docs --clean-build --clean-external-projects"
}

def build_and_test_macos() {
    git_clone()
    sh "$WORKSPACE/buildconfig/Jenkins/Conda/conda-buildscript $WORKSPACE osx-ci --enable-systemtests --enable-docs --enable-doctests --enable-dev-docs --clean-build --clean-external-projects"
}

def build_and_test_win(){
    git_clone()
    bat "\"C:\\Program Files\\git\\bin\\bash.exe\" -c \"C:/Jenkins/workspace/main_nightly_deployment_prototype/buildconfig/Jenkins/Conda/conda-buildscript C:/Jenkins/workspace/main_nightly_deployment_prototype win --enable-systemtests --enable-docs --clean-build --clean-external-projects\""
}

def conda_build_UNIX(){
    sh "$WORKSPACE/buildconfig/Jenkins/Conda/conda-build-recipes $WORKSPACE --build-mantid --build-qt --build-workbench"
}

def conda_build_linux() {
    conda_build_UNIX()
    archive:
        includes: "mambaforge/envs/mantid-developer/conda-bld/linux-64/*.tar.bz2"
}

def conda_build_macos() {
    conda_build_UNIX()
    archive:
        includes: "mambaforge/envs/mantid-developer/conda-bld/osx-64/*.tar.bz2"
}

def conda_build_win(){
    bat "\"C:\\Program Files\\git\\bin\\bash.exe\" -c \"$WORKSPACE/buildconfig/Jenkins/Conda/conda-build-recipes $WORKSPACE --build-mantid --build-qt --build-workbench\""
    archive:
        includes: "mambaforge/envs/mantid-developer/conda-bld/win-64/*.tar.bz2"
}

def deploy_packages() {
    sh "echo 'Deploy packages!'"
}

pipeline {
    agent none
    stages {
        stage('Build and Test'){
            parallel {
                stage('Build and Test on Ubuntu'){
                    agent { label 'ubuntu-18.04-build' }
                    steps {
                        build_and_test_linux()
                    }
                }
                stage('Build and Test on RHEL7') {
                    agent { label 'rhel7-build' }
                    steps {
                        build_and_test_linux()
                    }
                }
                stage('Build and Test on Windows') {
                    agent { label 'win-build' }
                    steps {
                        build_and_test_win()
                    }
                }
                stage('Build and Test on MacOS') {
                    agent { label 'osx-10.13-build' }
                    steps {
                        build_and_test_macos()
                    }
                }
            }
        }
        stage('Package and Test') {
            parallel {
                stage('conda-build Linux') {
                    agent { label 'conda-build-linux' }
                    steps {
                        conda_build_linux()
                    }
                }
                stage('conda-build Windows [WIP]') {
                    agent { label 'conda-build-win' }
                    steps {
                        conda_build_win()
                    }
                }
                stage('conda-build MacOSX [WIP]') {
                    agent { label 'conda-build-osx' }
                    steps {
                        conda_build_macos()
                    }
                }
            }
        }
        stage ('Deploy packages'){
            steps{
                deploy_packages()
            }
        }
    }
    post {
        cleanup{
            deleteDir()
        }
    }
}
